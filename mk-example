#!/usr/bin/env bash

mkProg=$(basename "$0")   # use the invoked filename as the program name
mkVersion=0.2

read -rd '' mkUsage <<END
Usage:

  $mkProg [OPTIONS] [--] git-update DIR [DIR...]

  git-update -- if the upstream branch has made progress, git-update rebases the current
  branch on its upstream.

  Options (if multiple, must be provided as separate flags):

    -h | --help     show this message and exit
    -v | --version  show the program version and exit
    -x | --trace    enable debug tracing
END

## commands

cmd.git-update() {
  (( $# > 0 )) || mk.fatal 'directory required' 2
  echo "$*" |             # quoted to preserve IFS
    mk.keepif isGitRepo |
    mk.each rebaseIfUpstreamHasProgressed
}

## helpers

# git-update

# isGitRepo returns whether its argument contains a .git directory.
isGitRepo() { [[ -d $1/.git ]]; }

# isMergeBaseOf returns whether ref2 is the merge-base of ref and ref2.
isMergeBaseOf() {
  local ref=$1 ref2=$2 mergeBase
  mergeBase=$(git merge-base $ref $ref2)
  [[ $mergeBase == "$ref2" ]]
}

# rebaseIfUpstreamHasProgressed rebases a repo if its upstream branch has been updated.
# It runs in a subshell so it can change directory without affecting the caller.
rebaseIfUpstreamHasProgressed() (
  local dir=$1

  mk.cue cd $dir
  mk.cue git fetch

  local ref=$(git rev-parse HEAD)
  local upstreamRef=$(git rev-parse @{upstream})
  isMergeBaseOf $ref $upstreamRef || mk.cue git rebase $upstreamRef

  echo
)

## globals

## boilerplate

source ~/.local/libexec/mk.bash 2>/dev/null || { echo 'fatal: mk.bash not found' >&2; exit 1; }

# enable safe expansion
IFS=$'\n'
set -o noglob

return 2>/dev/null    # stop if sourced, for interactive debugging
mk.handleOptions $*   # standard options
mk.main ${*:$?+1}     # showtime
